# Generated by Django 5.2 on 2025-05-11 05:07

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import todo_app.validators.tag_validator


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        error_messages={
                            "blank": "This field cannot be blank",
                            "invalid": "Invalid value",
                            "max_length": "Ensure this value has at most 50 characters",
                            "null": "This field cannot be null",
                        },
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        default="#cccccc",
                        error_messages={
                            "blank": "This field cannot be blank",
                            "invalid": "Invalid value",
                            "max_length": "Ensure this value has at most 8 characters",
                            "null": "This field cannot be null",
                        },
                        max_length=8,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "tag",
                "verbose_name_plural": "tags",
                "db_table": "tag",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Todo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        error_messages={
                            "blank": "This field cannot be blank",
                            "invalid": "Invalid value",
                            "max_length": "Ensure this value has at most 255 characters",
                            "null": "This field cannot be null",
                        },
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        default="",
                        error_messages={"invalid": "Enter a valid value"},
                        null=True,
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        error_messages={"invalid": "Enter a valid date/time"},
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        error_messages={"invalid": "Enter a valid date/time"},
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("L", "Low"),
                            ("M", "Medium"),
                            ("H", "High"),
                            ("U", "Urgent"),
                        ],
                        db_index=True,
                        default="M",
                        error_messages={
                            "invalid_choice": "Please choose one of the following options: L: Low, M: Medium, H: High, U: Urgent."
                        },
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("L", "Low"),
                            ("M", "Medium"),
                            ("H", "High"),
                            ("U", "Urgent"),
                        ],
                        db_index=True,
                        default="P",
                        error_messages={
                            "invalid_choice": "Please choose one of the following options: P: Pending, C: Completed, A: Archived."
                        },
                        max_length=255,
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        error_messages={"invalid": "Invalid value"},
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        error_messages={
                            "invalid": "Invalid value",
                            "invalid_choice": "Select a valid choice. That choice is not one of the available choices.",
                            "invalid_pk_value": "Invalid primary key value",
                            "null": "This field cannot be null",
                        },
                        related_name="todos",
                        to="todo_app.tag",
                        validators=[
                            todo_app.validators.tag_validator.TagValidators.validate_tag
                        ],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        error_messages={
                            "blank": "This field cannot be blank",
                            "does_not_exist": "Object does not exist",
                            "invalid": "Invalid value",
                            "invalid_choice": "Select a valid choice. That choice is not one of the available choices.",
                            "null": "This field cannot be null",
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="todos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "todo",
                "verbose_name_plural": "todos",
                "db_table": "todo",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="SubTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        error_messages={
                            "blank": "This field cannot be blank",
                            "invalid": "Invalid value",
                            "max_length": "Ensure this value has at most 255 characters",
                            "null": "This field cannot be null",
                        },
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "is_done",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        error_messages={"invalid": "Invalid value"},
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "todo",
                    models.ForeignKey(
                        error_messages={
                            "blank": "This field cannot be blank",
                            "does_not_exist": "Object does not exist",
                            "invalid": "Invalid value",
                            "invalid_choice": "Select a valid choice. That choice is not one of the available choices.",
                            "null": "This field cannot be null",
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subtasks",
                        to="todo_app.todo",
                    ),
                ),
            ],
            options={
                "verbose_name": "sub task",
                "verbose_name_plural": "sub tasks",
                "db_table": "sub_task",
                "ordering": ["-id"],
            },
        ),
    ]
